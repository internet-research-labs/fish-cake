var svv =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "assets/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.lezgo = undefined;

	var _PlanetApp = __webpack_require__(1);

	function lezgo(id) {

	  // Initial game state
	  fetch("/world").then(function (resp) {
	    return resp.json();
	  }).then(function (world) {
	    console.log(world);
	  });

	  // Get live stream
	  var socket = new WebSocket("ws://localhost:8000/ws");

	  socket.onopen = function (a, b, c) {
	    console.log("OPENED!", a, b, c);

	    socket.addEventListener('message', function (ev) {
	      console.log("MESSAGE:", ev);
	    });

	    socket.addEventListener("close", function () {
	      console.log("CLOSED!");
	    });
	  };

	  // Render loop
	  var app = new _PlanetApp.PlanetApp({
	    id: id
	  });

	  app.setup();

	  (function loop() {
	    app.update();
	    app.draw();
	    requestAnimationFrame(loop);
	  })();

	  // Things that you might want later
	  return [app, socket];
	}

	exports.lezgo = lezgo;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PlanetApp = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _THREE = __webpack_require__(2);

	var THREE = _interopRequireWildcard(_THREE);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// Return an instance of wavvey app
	var PlanetApp = exports.PlanetApp = function () {
	  function PlanetApp(params) {
	    _classCallCheck(this, PlanetApp);

	    this.id = params.id;
	    this.el = document.getElementById(this.id);
	    this.app = {};
	    this.width = this.el.offsetWidth;
	    this.height = this.el.offsetHeight;
	  }

	  _createClass(PlanetApp, [{
	    key: 'setup',
	    value: function setup() {
	      this.app = {
	        view_angle: 50,
	        aspect: this.width / this.height,
	        near: 0.01,
	        far: 200
	      };

	      this.needsUpdate = false;

	      // Scene
	      this.scene = new THREE.Scene();

	      // Renderer
	      this.renderer = new THREE.WebGLRenderer({
	        antialias: true,
	        canvas: this.el
	      });

	      this.renderer.setSize(this.width, this.height);
	      this.renderer.setClearColor(0xFFFFFF, 1);
	      this.renderer.setPixelRatio(1.5);

	      document.body.appendChild(this.renderer.domElement);

	      var light0 = new THREE.AmbientLight(0x777777);
	      var light1 = new THREE.DirectionalLight(0xcccccc, 0.4);
	      var light2 = new THREE.PointLight(0xff0000, 0.5);
	      var light3 = new THREE.PointLight(0x00ffff, 0.5);
	      light2.position.set(4.8, 10.0, -0.1);
	      light3.position.set(4.0, 10.0, -0.0);

	      this.scene.add(light0);
	      // this.scene.add(light1);
	      this.scene.add(light2);
	      this.scene.add(light3);

	      this.setupCamera();
	      this.setupWorld();

	      var a = 1.5;
	      var x = a - 0.5,
	          y = a,
	          z = -a;

	      this.resize(this.width, this.height);
	    }

	    // Return object containing all the necessary event handlers

	  }, {
	    key: 'eventHandlers',
	    value: function eventHandlers() {
	      var _this = this;

	      var self = this;
	      var mouse = { x: 0.0, y: 0.0 };

	      return {
	        resize: debounce(100, function (ev) {
	          var size = Math.min(window.innerWidth, window.innerHeight);
	          _this.width = window.innerWidth;
	          _this.height = window.innerHeight;
	          self.resize(_this.width, _this.height);
	        }),
	        move: debounce(10, function (ev) {
	          mouse.x = ev.clientX;
	          mouse.y = ev.clientY;
	          // let u = 1*ev.clientX/window.innerWidth-1.0;
	          // let v = 1*ev.clientX/window.innerWidth-1.0;
	          // this.rgbPass.uniforms['amount'].value = Math.sqrt(u*u+v*v)/298.+0.002;
	          var y = -1 * (2 * mouse.y / window.innerHeight - 1.0);
	          var z = -1 * (2 * mouse.x / window.innerWidth - 1.0);
	          //this.updatePosition(y, z);
	        })
	      };
	    }
	  }, {
	    key: 'setupWorld',
	    value: function setupWorld() {
	      var geometry = new THREE.CylinderGeometry(1.0, 1.0, 16, 100);
	      var material = new THREE.MeshPhongMaterial({
	        color: 0xCCCCCC,
	        emissive: 0x111111,
	        specular: 0x444444,
	        shininess: 90.0
	      });
	      var mesh = new THREE.Mesh(geometry, material);
	      mesh.rotation.x = Math.PI / 2.0;
	      mesh.rotation.z = Math.PI / 2.0;
	      this.scene.add(mesh);
	    }

	    /**
	     * Setup Camera
	     */

	  }, {
	    key: 'setupCamera',
	    value: function setupCamera() {
	      this.camera = new THREE.PerspectiveCamera(this.app.view_angle, this.app.aspect, this.app.near, this.app.far);

	      this.camera.position.set(0.0, 0.0, 40.0);
	      this.camera.lookAt(0, 0, 0);
	    }

	    /**
	     * Update
	     */

	  }, {
	    key: 'update',
	    value: function update(params) {
	      if (this.needsUpdate) {
	        this.needsUpdate = false;
	      }
	    }
	  }, {
	    key: 'resize',
	    value: function resize(width, height) {
	      this.width = width;
	      this.height = height;
	      this.app.aspect = this.width / this.height;
	      this.camera.aspect = this.app.aspect;
	      this.camera.updateProjectionMatrix();
	      this.renderer.setSize(this.width, this.height);
	      // this.composer.setSize(this.width, this.height);
	    }
	  }, {
	    key: 'draw',
	    value: function draw() {
	      // this.composer.render(1.05);
	      this.renderer.render(this.scene, this.camera);
	    }
	  }]);

	  return PlanetApp;
	}();

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = THREE;

/***/ })
/******/ ]);