var svv =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "assets/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.lezgo = undefined;

	var _PlanetApp = __webpack_require__(1);

	/**
	 * Game State
	 */
	var STATE = {
	  ships: []
	};

	function lezgo(id) {

	  var app = new _PlanetApp.PlanetApp({
	    id: id,
	    state: STATE
	  });

	  app.setup();

	  // Get live stream
	  var socket = new WebSocket("ws://localhost:8000/ws");

	  fetch("/world").then(function (resp) {
	    return resp.json();
	  }).then(function (world) {
	    app.updateWorld(world);
	  });

	  socket.onopen = function (a, b, c) {
	    console.log("OPENED!", a, b, c);

	    socket.addEventListener('message', function (ev) {
	      var data = JSON.parse(ev.data);
	      var ships = data.ships;
	      app.updateShips(ships);
	      app.needsUpdate = true;
	    });

	    socket.addEventListener("close", function () {
	      console.log("CLOSED!");
	    });
	  }

	  // Render loop
	  (function loop() {
	    app.update();
	    app.draw();
	    requestAnimationFrame(loop);
	  }());

	  // Things that you might want later
	  return [app, socket];
	}

	exports.lezgo = lezgo;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PlanetApp = undefined;

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _THREE = __webpack_require__(2);

	var THREE = _interopRequireWildcard(_THREE);

	var _math = __webpack_require__(3);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// Return an instance of wavvey app
	var PlanetApp = exports.PlanetApp = function () {
	  function PlanetApp(params) {
	    _classCallCheck(this, PlanetApp);

	    this.id = params.id;
	    this.el = document.getElementById(this.id);
	    this.app = {};
	    this.width = this.el.offsetWidth;
	    this.height = this.el.offsetHeight;
	    this.state = params.state;
	  }

	  _createClass(PlanetApp, [{
	    key: 'setup',
	    value: function setup() {
	      this.app = {
	        view_angle: 67,
	        aspect: this.width / this.height,
	        near: 0.01,
	        far: 200
	      };

	      this.needsUpdate = false;

	      // Scene
	      this.scene = new THREE.Scene();

	      // Renderer
	      this.renderer = new THREE.WebGLRenderer({
	        antialias: true,
	        canvas: this.el
	      });

	      this.renderer.setSize(this.width, this.height);
	      this.renderer.setClearColor(0xFFFFFF, 1);
	      this.renderer.setPixelRatio(1.5);

	      document.body.appendChild(this.renderer.domElement);

	      var light0 = new THREE.AmbientLight(0x777777);
	      var light1 = new THREE.DirectionalLight(0xcccccc, 0.4);
	      var light2 = new THREE.PointLight(0xff0000, 0.5);
	      var light3 = new THREE.PointLight(0x00ffff, 0.5);
	      light2.position.set(4.8, 10.0, -0.1);
	      light3.position.set(4.0, 10.0, -0.0);

	      this.scene.add(light0);
	      // this.scene.add(light1);
	      this.scene.add(light2);
	      this.scene.add(light3);

	      this.setupCamera();

	      var a = 1.5;
	      var x = a - 0.5,
	          y = a,
	          z = -a;

	      this.resize(this.width, this.height);

	      // Empty amount of ships
	      this.ships = new Map();
	    }

	    // Return object containing all the necessary event handlers

	  }, {
	    key: 'eventHandlers',
	    value: function eventHandlers() {
	      var _this = this;

	      var self = this;
	      var mouse = { x: 0.0, y: 0.0 };

	      return {
	        resize: debounce(100, function (ev) {
	          var size = Math.min(window.innerWidth, window.innerHeight);
	          _this.width = window.innerWidth;
	          _this.height = window.innerHeight;
	          self.resize(_this.width, _this.height);
	        }),
	        move: debounce(10, function (ev) {
	          mouse.x = ev.clientX;
	          mouse.y = ev.clientY;
	          // let u = 1*ev.clientX/window.innerWidth-1.0;
	          // let v = 1*ev.clientX/window.innerWidth-1.0;
	          // this.rgbPass.uniforms['amount'].value = Math.sqrt(u*u+v*v)/298.+0.002;
	          var y = -1 * (2 * mouse.y / window.innerHeight - 1.0);
	          var z = -1 * (2 * mouse.x / window.innerWidth - 1.0);
	          //this.updatePosition(y, z);
	        })
	      };
	    }

	    // Construct the torus

	  }, {
	    key: 'setupWorld',
	    value: function setupWorld() {}
	  }, {
	    key: 'coord',
	    value: function coord(t, f, float) {
	      var _params = this.params,
	          radius = _params.radius,
	          depth = _params.depth;

	      depth += float || 0.0;
	      return [(radius + depth * Math.cos(f)) * Math.cos(t), depth * Math.sin(f), (radius + depth * Math.cos(f)) * Math.sin(t)];
	    }

	    // Update world from a world object

	  }, {
	    key: 'updateWorld',
	    value: function updateWorld(world) {
	      var _this2 = this;

	      this.params = {
	        radius: world.radius,
	        depth: world.thickness
	      };

	      var geometry = new THREE.TorusGeometry(this.params.radius, this.params.depth, 16, 100);
	      var material = new THREE.MeshPhongMaterial({
	        color: 0xCCCCCC,
	        emissive: 0x111111,
	        specular: 0x444444,
	        shininess: 90.0
	      });

	      var mesh = new THREE.Mesh(geometry, material);
	      mesh.rotation.x = Math.PI / 2.0;
	      mesh.rotation.z = Math.PI / 2.0;
	      this.scene.add(mesh);

	      world.buildings.forEach(function (v) {

	        var height = 3 * Math.random() + 0.1;
	        height = 3;

	        var theta = v.theta,
	            fi = v.fi;
	        // fi = 0.0;

	        theta = Math.PI / 2.0;

	        var p = _this2.coord(theta, fi, 4.0);
	        var q = _this2.coord(theta, fi, 6.0);
	        var r = _this2.coord(theta + 0.1, fi, 4.0);
	        var b = (0, _math.sub)(q, p);
	        var c = (0, _math.sub)(r, p);

	        var f = new THREE.Vector3(b[0], b[1], b[2]);
	        f.normalize();

	        var o = new THREE.Mesh(new THREE.ConeGeometry(0.25, height), material);

	        console.log(r);
	        o.position.set(p[0], p[1], p[2]);

	        _this2.scene.add(o);

	        /*
	        this.scene.add(new THREE.ArrowHelper(
	          f,
	          o.position,
	          4.3,
	          0x000000,
	        ));
	        */
	      });
	    }

	    /**
	     * Setup Camera
	     */

	  }, {
	    key: 'setupCamera',
	    value: function setupCamera() {
	      this.camera = new THREE.PerspectiveCamera(this.app.view_angle, this.app.aspect, this.app.near, this.app.far);

	      // Camera
	      this.camera.position.set(0.0, 30.0, 0.0);
	      this.camera.lookAt(0, 0, 0);
	    }
	  }, {
	    key: 'getShipObject',
	    value: function getShipObject(id) {
	      var o = this.scene.getObjectByName(id);

	      if (o == undefined) {
	        o = new THREE.Mesh(new THREE.BoxGeometry(0.5, 0.5, 0.5), new THREE.MeshBasicMaterial({ color: 0x000000 }));
	        var a = Math.random() * 2 * Math.PI;
	        var b = Math.random() * 2 * Math.PI;
	        var c = Math.random() * 2 * Math.PI;
	        o.rotation.set(a, b, c);
	      }

	      return o;
	    }

	    // Update positions of ships from a map

	  }, {
	    key: 'updateShips',
	    value: function updateShips(ships) {
	      for (var id in ships) {
	        var s = ships[id];
	        var o = this.getShipObject("SHIP:" + id);

	        if (!this.ships.has(id)) {
	          o.name = "SHIP:" + id;
	          this.scene.add(o);
	        }

	        var _coord = this.coord(s.coord.theta, s.coord.fi, 1.0),
	            _coord2 = _slicedToArray(_coord, 3),
	            x = _coord2[0],
	            y = _coord2[1],
	            z = _coord2[2];

	        o.position.set(x, y, z);
	        this.ships.set(id, s);
	      }
	    }

	    // Update

	  }, {
	    key: 'update',
	    value: function update(params) {
	      if (this.needsUpdate) {
	        this.needsUpdate = false;
	      }

	      var t = new Date() / 1000.0;
	      var r = 40.0;

	      var x = r * Math.cos(t);
	      var y = 0.0;
	      var z = r * Math.sin(t);

	      y = 40.0;

	      this.camera.position.set(x, y, z);
	      this.camera.lookAt(0.0, 0.0, 0.0);
	    }

	    // Resize canvas and set camera straight

	  }, {
	    key: 'resize',
	    value: function resize(width, height) {
	      this.width = width;
	      this.height = height;
	      this.app.aspect = this.width / this.height;
	      this.camera.aspect = this.app.aspect;
	      this.camera.updateProjectionMatrix();
	      this.renderer.setSize(this.width, this.height);
	    }

	    // Draw

	  }, {
	    key: 'draw',
	    value: function draw() {
	      this.renderer.render(this.scene, this.camera);
	    }
	  }]);

	  return PlanetApp;
	}();

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = THREE;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.norm = norm;
	exports.proj = proj;
	exports.cross = cross;
	exports.add = add;
	exports.sub = sub;
	exports.scale = scale;
	exports.normalize = normalize;
	function norm(v) {
	  return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
	}

	/**
	 * Project u onto v
	 */
	function proj(u, v) {
	  var s = 1;
	  v = normalize(v);
	  return scale(v, s);
	}

	function cross(u, v) {
	  return [u[1] * v[2] - u[2] * v[1], u[2] * v[0] - u[0] * v[2], u[0] * v[1] - u[1] * v[0]];
	}

	function add(x, y) {
	  return [x[0] + y[0], x[1] + y[1], x[2] + y[2]];
	}

	function sub(x, y) {
	  return [x[0] - y[0], x[1] - y[1], x[2] - y[2]];
	}

	function scale(v, s) {
	  return [v[0] * s, v[1] * s, v[2] * s];
	}

	function normalize(v) {
	  var n = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);

	  if (n == 0) {
	    return [0, 0, 0];
	  }

	  return [v[0] / n, v[1] / n, v[2] / n];
	}

/***/ })
/******/ ]);